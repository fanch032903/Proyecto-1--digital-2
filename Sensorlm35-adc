/********************************************/
// Universidad del Valle de Guatemala
// BE3029 - Electrónica Digital 2
// Fátima Camposeco - 23122
// 08/2025
// Proyecto 1 
// MCU: ESP32 Dev Kit V1
/********************************************/

#include <Arduino.h>
#include <stdint.h>

//=== Definir Pines ===

// Sensor y botón
#define PIN_LM35    34   // ADC 
#define PIN_BOTON1  36   // Botón (INPUT_PULLUP)

// LED RGB
#define LED_R 5 //Roja
#define LED_G 18 // verde
#define LED_B 19 // Amarilla 

// Canales PWM
#define CH_R 0 //LED Roja 
#define CH_G 1 //LED Verde
#define CH_B 2 //LED amarilla 

// Datos PWM para LEDs
#define FREQ 5000       // Frecuencia PWM
#define RESOLUTION 8    // Resolución PWM (0–255)


//=== Variables globales==

float temperaturaC = 0;
float promedioLecturas = 0;

//===Funciones ===
float getADCPromedio(void);
void actualizarSemaforo(float temp);


void setup() {
  Serial.begin(115200);

  // Configuración de pines
  pinMode(PIN_BOTON1, INPUT_PULLUP);
  pinMode(PIN_LM35, INPUT);

  // PWM para LEDs
  ledcSetup(CH_R, FREQ, RESOLUTION);
  ledcSetup(CH_G, FREQ, RESOLUTION);
  ledcSetup(CH_B, FREQ, RESOLUTION);

  ledcAttachPin(LED_R, CH_R); //  LEDS con PWM 
  ledcAttachPin(LED_G, CH_G);
  ledcAttachPin(LED_B, CH_B);
}


void loop() {
  if (digitalRead(PIN_BOTON1) == LOW) {  // Solo mide al presionar el botón
    promedioLecturas = getADCPromedio();
    int mV = analogReadMilliVolts(PIN_LM35);
    temperaturaC = mV / 10.0; // LM35: 10 mV = 1 °C

    // Mostrar en monitor para verificar las lecturas 
    Serial.print("ADC promedio: ");
    Serial.println(promedioLecturas);
    Serial.print("Temperatura: ");
    Serial.print(temperaturaC);
    Serial.println(" °C");

    // Actualizar LEDS 
    actualizarSemaforo(temperaturaC);

    delay(500);
  }
}


// Funciones

float getADCPromedio(void) {
  int numeroLecturas = 10;
  long sumaLecturas = 0;

  for (int k = 0; k < numeroLecturas; k++) {
    sumaLecturas += analogRead(PIN_LM35);
    delay(5);
  }

  float promedio = sumaLecturas / (numeroLecturas * 1.0);
  return promedio;
}

void actualizarSemaforo(float temp) {
  // Apagar todo primero
  ledcWrite(CH_R, 0);
  ledcWrite(CH_G, 0);
  ledcWrite(CH_B, 0);

  if (temp < 22.0) {
    // Verde
    ledcWrite(CH_G, 255);
  } 
  else if (temp >= 22.0 && temp < 25.0) {
    // Amarillo 
    ledcWrite(CH_B, 255);

  } 
  else {
    // Rojo
    ledcWrite(CH_R, 255);
  }
}
